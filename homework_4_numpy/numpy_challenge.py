import numpy as np



if __name__== '__main__':
    print(np.array([[1,2,3], [4,5,6], [7,8,9]]))
    print(np.linspace(0, 3, 9))
    print(np.arange(1, 9, 0.5))




'''
Основные задачи на оценку
Создайте 3 ваших любимых эррея разными способами
Создайте функцию matrix_multiplication, которая принимает 2 матрицы, перемножает их по соответствующим правилам и выдаёт получившуюся матрицу. Имеется ввиду матричное перемножение, а НЕ поэлементное
Создайте функцию multiplication_check, которая принимает список с матрицами, и выдаёт True, если они могут быть перемножены друг на друга в порядке, в котором они находятся в списке, и False, если их нельзя перемножить.
Создайте функцию multiply_matrices, которая принимает список с матрицами, и выдаёт результат перемножения, если его можно получить, или возвращает None, если их нельзя перемножить
Создайте функцию compute_2d_distance, принимающую 2 одномерных эррея c парой значений (как координаты точки на плоскости) и вычисляющую расстояние между ними
Создайте функцию compute_multidimensional_distance, принимающую 2 одномерных эррея с любым количеством значений (но равным) и вычисляющую расстояние между ними
Создайте функцию compute_pair_distances, которая получает 2d эррей, где каждая строка это наблюдение, а каждый столбец - фича. Функция рассчитывает матрицу попарных расстояний и выдаёт её пользователю.
Код вне функций писать не нужно (первое задание можно сделать это в блоке if __name__ == "__main__":). Все функции сохраните в файле numpy_challenge.py. Будет проводиться полуавтоматическая проверка, так что просим соблюдать указанный нейминг функций и файлов.

Можно пользоваться любым функционалом библиотеки numpy. Другими модулями пользоваться нельзя. Если какая-то из функций numpy способна почти полностью решить задание, то её стоит использовать, в этом ДЗ крайне не рекомендуется изобретать велосипеды. Так что перед выполнением задания стоит ознакомиться с тем, что вообще умеет делать эта либа.
'''